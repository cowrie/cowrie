[build-system]
requires = ["setuptools>=80", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "cowrie"
dynamic = ["version"]
description="Cowrie SSH/Telnet Honeypot."
license="BSD-3-Clause"
license-files = [ "LICENSE.rst" ]
authors = [ {name = "Michel Oosterhof", email="michel@oosterhof.net"}, ]
maintainers = [ {name = "Michel Oosterhof", email="michel@oosterhof.net"}, ]
keywords=["ssh", "telnet", "honeypot"]
requires-python = ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*, !=3.7.*, !=3.8.*, !=3.9.*, <4"
readme="README.rst"
classifiers=[
        "Development Status :: 5 - Production/Stable",
        "Environment :: No Input/Output (Daemon)",
        "Framework :: Twisted",
        "Intended Audience :: Developers",
        "Intended Audience :: System Administrators",
        "Operating System :: MacOS :: MacOS X",
        "Operating System :: POSIX :: Linux",
        "Operating System :: POSIX",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3 :: Only",
        "Topic :: Security"
]

dependencies = [
        "attrs==25.3.0",
        "bcrypt==5.0.0",
        "cryptography==46.0.1",
        "hyperlink==21.0.0",
        "idna==3.10",
        "packaging==25.0",
        "pyasn1_modules==0.4.2",
        "requests==2.32.5",
        "service_identity==24.2.0",
        "tftpy==0.8.6",
        "treq==25.5.0",
        "twisted[conch]==25.5.0",
]

[project.urls]
homepage = "https://www.cowrie.org/"
documentation = "https://docs.cowrie.org/"
repository = "https://github.com/cowrie/cowrie"

[project.scripts]
cowrie = "cowrie.scripts.cowrie:run"
fsctl = "cowrie.scripts.fsctl:run"
asciinema = "cowrie.scripts.asciinema:run"
createfs = "cowrie.scripts.createfs:run"
playlog = "cowrie.scripts.playlog:run"

[project.optional-dependencies]
csirtg = ["csirtgsdk==1.1.5"]
dshield = ["requests"]
elasticsearch = ["pyes"]
mysql = ["mysqlclient"]
mongodb = ["pymongo"]
pool = ["libvirt-python==11.8.0"]
rethinkdblog = ["rethinkdb"]
s3 = ["botocore"]
slack = ["slackclient"]
influxdb = ["influxdb"]
dev = [
"build==1.3.0",
"coverage==7.10.6",
"mypy-extensions==1.1.0; platform_python_implementation=='CPython'",
"mypy-zope==1.0.13; platform_python_implementation=='CPython'",
"mypy==1.17.1; platform_python_implementation=='CPython'",
"pathspec==0.12.1",
"pipdeptree==2.28.0",
"pre-commit==4.3.0",
"pylint==3.3.8",
"pyre-check==0.9.25",
"pyright==1.1.405",
"pytype==2024.10.11; platform_python_implementation=='CPython'",
"pyupgrade==3.20.0",
"pyyaml==6.0.3",
"readthedocs-sphinx-search==0.3.2",
"ruff==0.13.3",
"setuptools==80.9.0",
"sphinx-copybutton==0.5.2",
"sphinx_rtd_theme==3.0.2",
"tox==4.30.2",
"types-python-dateutil==2.9.0.20250822",
"types-redis==4.6.0.20241004",
"types-requests==2.32.4.20250913",
"yamllint==1.37.1",
]


[tool.isort]
profile = "black"
known_zope = "zope"
known_twisted = "twisted"
known_first_party = ["cowrie","backend_pool"]
sections=["FUTURE","STDLIB","THIRDPARTY","ZOPE","TWISTED","FIRSTPARTY","LOCALFOLDER"]


[tool.mypy]
namespace_packages = true
plugins = [ "mypy_zope:plugin" ]
disable_error_code = [ "annotation-unchecked" ]

ignore_missing_imports      = true
warn_unused_configs         = true
no_implicit_optional        = true
show_column_numbers         = true
show_error_codes            = true
strict_optional             = true
warn_no_return              = true
warn_redundant_casts        = true
warn_return_any             = true
warn_unreachable            = true
disallow_incomplete_defs    = true
disallow_any_unimported     = true
strict_equality             = true
disallow_untyped_decorators = true
disallow_subclassing_any    = true
warn_unused_ignores         = true
local_partial_types         = true
no_implicit_reexport        = true

# Getting these passing should be easy
# strict_concatenate          = true

# These are too strict for us at the moment

check_untyped_defs          = false
disallow_untyped_defs       = false
disallow_any_decorated      = false
disallow_any_explicit       = false
disallow_any_expr           = false
disallow_any_generics       = false
disallow_untyped_calls      = false


[tool.pylint."MESSAGES CONTROL"]
disable = ["R0801", "R0901", "R0902", "R0903", "R0904", "R0912", "R0913", "R0914", "R0915", "C0103", "C0114", "C0115", "C0116", "C0301", "W0201"]
ignored-classes = ["twisted.internet.reactor"]


[tool.pyright]
include = ["src"]
typeCheckingMode = "strict"
reportArgumentType = "none"
reportAssignmentType = "none"
reportAttributeAccessIssue = "none"
reportCallIssue = "information"
reportGeneralTypeIssues = "information"
reportIncompatibleMethodOverride = "information"
reportIncompatibleVariableOverride = "none"
reportMissingImports = "none"
reportMissingModuleSource = "none"
reportOperatorIssue = "information"
reportOptionalCall = "information"
reportOptionalMemberAccess = "none"
reportOptionalOperand = "information"
reportPossiblyUnboundVariable = "information"
reportUnsupportedDunderAll = "information"

[tool.pytype]
inputs = ["src"]
jobs = "auto"
keep-going = true

[tool.ruff]
line-length = 88

# Enable Pyflakes `E` and `F` codes by default.
lint.select = ["A", "B", "E", "F", "UP", "YTT", "B", "T20", "Q", "RUF", "TC", "TRY", "PYI", "FAST"]
lint.ignore = ["A005", "E501", "UP007", "B019", "RUF001"]

exclude = [ "src/cowrie/_version.py" ]

# Assume Python 3.10.
target-version = "py310"

# Ignore `T201` (print) in all scripts
[tool.ruff.lint.per-file-ignores]
"src/cowrie/scripts/*" = ["T201"]


[tool.setuptools]
package-dir = {"" = "src"}


[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
version_file = "src/cowrie/_version.py"

[tool.tox]
legacy_tox_ini = """
    [tox]
    envlist = lint,docs,typing,py310,py311,py312,py313,py314,pypy310,pypy311
    deps = -r{toxinidir}/requirements.txt
    skip_missing_interpreters = True

    [gh-actions]
    python =
        3.10: py310, lint, docs, typing, pypi
        3.11: py311
        3.12: py312
        3.13: py313
        3.14: py314
        pypy-3.10: pypy310
        pypy-3.11: pypy311

    [testenv]
    setenv =
        PYTHONPATH = {toxinidir}/src
        PIP_QUIET = 1

    commands =
        python -m unittest discover src --verbose

    [testenv:pypi]
    extras =
        dev
    allowlist_externals =
        twine
    commands =
        python -m build
        twine check dist/*
        # - twine upload --verbose --repository testpypi dist/*\n
        # python -m pip install -i https://test.pypi.org/simple/ cowrie

    [testenv:lint]
    extras =
        dev
    allowlist_externals =
        yamllint
    commands =
        ruff check {toxinidir}/src
        - yamllint {toxinidir}
        - pyright
        - pylint {toxinidir}/src
    basepython = python3.10

    [testenv:docs]
    setenv =
        PYTHONPATH = {toxinidir}/src
    changedir = docs
    extras =
        dev
    commands =
        sphinx-build -W -b html -d {envtmpdir}/doctrees . {envtmpdir}/html
    basepython = python3.10

    [testenv:typing]
    description = run static type checkers
    extras =
        dev
    commands =
        mypy                                       \
            --cache-dir="{toxworkdir}/mypy_cache"  \
            --config-file="{toxinidir}/pyproject.toml" \
            {tty:--pretty:}                        \
            {posargs:src}
        - mypyc \
            --cache-dir="{toxworkdir}/mypyc_cache"  \
            --config-file="{toxinidir}/pyproject.toml" \
            {tty:--pretty:}                        \
            {posargs:src}
        - pytype -d import-error --keep-going --jobs auto {posargs:src}
        - pyre --noninteractive analyze
        - pyright {posargs:src}
    basepython = python3.10

    [testenv:coverage-report]
    deps = coverage
    skip_install = true
    commands =
        coverage combine
        coverage report

    [coverage:run]
    relative_files = True
    source = src/
    branch = True
"""
